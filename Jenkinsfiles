pipeline {
  agent any
  environment {
    DOCKER_HUB_USER = 'trgtamthanh'
    DOCKER_HUB_PWD = 'docker_hub' // Lưu trong Jenkins Credential
    IMAGE_TAG = ''
    GIT_CREDENTIALS_ID = 'github-token' // Dùng để push lại repo Helm
  }

  stages {
    stage('Prepare') {
      steps {
        script {
          // Lấy commit ID nếu là push hoặc PR
          if (env.GIT_COMMIT) {
            IMAGE_TAG = env.GIT_COMMIT.take(7)
          }

          // Nếu là tag release -> dùng tag làm image tag
          if (env.GIT_TAG_NAME) {
            IMAGE_TAG = env.GIT_TAG_NAME
          }

          echo "Image tag sẽ dùng: ${IMAGE_TAG}"
        }
      }
    }

    stage('Detect Changed Service') {
      steps {
        script {
          def changedFiles = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()
          def matchedService = ''

          changedFiles.split('\n').each { file ->
            if (file.contains("spring-petclinic-") && file.contains("-service/")) {
              matchedService = file.split('/')[0]
            }
          }

          if (!matchedService) {
            error("Không phát hiện service nào bị thay đổi.")
          }

          env.TARGET_SERVICE = matchedService
          echo "Service bị thay đổi: ${env.TARGET_SERVICE}"
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir("${env.TARGET_SERVICE}") {
          sh "../mvnw clean install -P buildDocker -Dcontainer.image.tag=${IMAGE_TAG}"
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          def imageName = "${DOCKER_HUB_USER}/${env.TARGET_SERVICE}:${IMAGE_TAG}"
          sh """
            echo "${DOCKER_HUB_PWD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin
            docker tag ${env.TARGET_SERVICE}:latest ${imageName}
            docker push ${imageName}
          """
        }
      }
    }


}
